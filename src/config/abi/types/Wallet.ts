/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WalletInterface extends utils.Interface {
  functions: {
    "accountBalance()": FunctionFragment;
    "balance()": FunctionFragment;
    "createToken()": FunctionFragment;
    "deposit()": FunctionFragment;
    "externalAccountBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerService(address,string)": FunctionFragment;
    "serviceDeposit(address)": FunctionFragment;
    "serviceWithdraw(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "externalAccountBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerService",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DepositMade(address,uint256)": EventFragment;
    "NewAccount(address)": EventFragment;
    "ServiceDepositMade(address,address,uint256)": EventFragment;
    "ServiceWithdrawMade(address,address,uint256)": EventFragment;
    "WithdrawMade(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceDepositMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceWithdrawMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawMade"): EventFragment;
}

export type DepositMadeEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export type NewAccountEvent = TypedEvent<[string], { account: string }>;

export type NewAccountEventFilter = TypedEventFilter<NewAccountEvent>;

export type ServiceDepositMadeEvent = TypedEvent<
  [string, string, BigNumber],
  { service: string; account: string; amount: BigNumber }
>;

export type ServiceDepositMadeEventFilter =
  TypedEventFilter<ServiceDepositMadeEvent>;

export type ServiceWithdrawMadeEvent = TypedEvent<
  [string, string, BigNumber],
  { service: string; account: string; amount: BigNumber }
>;

export type ServiceWithdrawMadeEventFilter =
  TypedEventFilter<ServiceWithdrawMadeEvent>;

export type WithdrawMadeEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type WithdrawMadeEventFilter = TypedEventFilter<WithdrawMadeEvent>;

export interface Wallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    createToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerService(
      _address: string,
      service_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceDeposit(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceWithdraw(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountBalance(overrides?: CallOverrides): Promise<BigNumber>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  createToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalAccountBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerService(
    _address: string,
    service_name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceDeposit(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceWithdraw(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    createToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    externalAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerService(
      _address: string,
      service_name: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    serviceDeposit(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    serviceWithdraw(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DepositMade(address,uint256)"(
      account?: string | null,
      amount?: null
    ): DepositMadeEventFilter;
    DepositMade(account?: string | null, amount?: null): DepositMadeEventFilter;

    "NewAccount(address)"(account?: string | null): NewAccountEventFilter;
    NewAccount(account?: string | null): NewAccountEventFilter;

    "ServiceDepositMade(address,address,uint256)"(
      service?: string | null,
      account?: string | null,
      amount?: null
    ): ServiceDepositMadeEventFilter;
    ServiceDepositMade(
      service?: string | null,
      account?: string | null,
      amount?: null
    ): ServiceDepositMadeEventFilter;

    "ServiceWithdrawMade(address,address,uint256)"(
      service?: string | null,
      account?: string | null,
      amount?: null
    ): ServiceWithdrawMadeEventFilter;
    ServiceWithdrawMade(
      service?: string | null,
      account?: string | null,
      amount?: null
    ): ServiceWithdrawMadeEventFilter;

    "WithdrawMade(address,uint256)"(
      account?: string | null,
      amount?: null
    ): WithdrawMadeEventFilter;
    WithdrawMade(
      account?: string | null,
      amount?: null
    ): WithdrawMadeEventFilter;
  };

  estimateGas: {
    accountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    createToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerService(
      _address: string,
      service_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceDeposit(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceWithdraw(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalAccountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerService(
      _address: string,
      service_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceDeposit(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceWithdraw(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
